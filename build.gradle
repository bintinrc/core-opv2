group "com.nv.qa"
version "1.1.0"
apply plugin: "java"

sourceCompatibility = 1.8

repositories {
    mavenCentral()
}

dependencies {
    testCompile "info.cukes:cucumber-java:1.2.5"
    testCompile "info.cukes:cucumber-junit:1.2.5"
    testCompile "info.cukes:cucumber-guice:1.2.5"
    testCompile "com.google.inject:guice:4.1.0"
    testCompile "org.seleniumhq.selenium:selenium-java:3.4.0"
    testCompile "org.seleniumhq.selenium:selenium-firefox-driver:3.4.0"
    testCompile "net.lightbody.bmp:browsermob-core:2.1.4"

    compile "io.fastjson:boon:0.33"
    compile "org.apache.commons:commons-lang3:3.5"
    compile "commons-beanutils:commons-beanutils:1.9.3"
    compile "ch.qos.logback:logback-classic:1.2.3"
    compile project(":commons")
}

test {
    testLogging {
        showStandardStreams = true
        events "started", "passed"
    }
}

tasks.withType(JavaCompile) {
    options.compilerArgs << "-Xlint:unchecked"
}

task showInfo {
    doLast {
        println "==============================================================================="
        println "gradle.gradleHomeDir           : $gradle.gradleHomeDir"
        println "project.sourceCompatibility    : $project.sourceCompatibility"
        println "project.targetCompatibility    : $project.targetCompatibility"
        println "sourceCompatibility            : $sourceCompatibility"
        println "targetCompatibility            : $targetCompatibility"
        println "==============================================================================="
    }
}

import org.apache.tools.ant.filters.ReplaceTokens

import java.util.concurrent.Executors
import java.util.concurrent.TimeUnit

def testOutputResourcesDir = sourceSets.test.output.resourcesDir as String
def cucumberFeatureDir = "$testOutputResourcesDir/cucumber"
def cucumberGluePackage = "com.nv.qa.cucumber.glue"

processTestResources {
    def environment = "local"

    if(project.hasProperty("environment"))
    {
        environment = project.getProperty("environment")
    }

    def propertiesFileName = "${sourceSets.test.resources.srcDirs[0]}/$environment-config.properties"
    println "[GRADLE_INFO] Resource is filtered and replaced using this properties file: $propertiesFileName"

    Properties properties = new Properties()
    properties.load(new FileInputStream(new File(propertiesFileName)))
    def tokens = properties.toSorted()

    filter(ReplaceTokens, tokens: tokens, beginToken: "{", endToken: "}")
}

/**
 * Execute Cucumber task.
 *
 * Note: Using JavaExec like this makes you can debug the code.
 */
task runCucumber(dependsOn: ["testClasses"], type: JavaExec) {
    main = "cucumber.api.cli.Main"
    classpath = sourceSets.test.runtimeClasspath
    args = [
            "--plugin", "pretty",
            "--plugin", "html:build/reports/cucumber-junit/htmloutput",
            "--plugin", "json:build/reports/cucumber-junit/cucumber.json",
            "--plugin", "junit:build/reports/cucumber-junit/cucumber.xml",
            "--monochrome",
            "--glue", cucumberGluePackage,
            cucumberFeatureDir
    ]

    if(project.hasProperty("tags"))
    {
        args "--tags", project.getProperty("tags")
    }

    if(project.hasProperty("environment"))
    {
        systemProperties["environment"] = project.getProperty("environment")
    }

    /**
     * Add all value from gradle arguments start with -D to System properties.
     */
    systemProperties System.properties
}

/**
 * Execute Cucumber task in parallel.
 */
task runCucumberParallel(dependsOn: ["testClasses"]) {
    doLast {
        def forkCount = 4

        if(project.hasProperty("forkCount"))
        {
            forkCount = project.getProperty("forkCount") as Integer
        }

        println "[GRADLE_INFO] Number of fork: $forkCount"
        def executorService = Executors.newFixedThreadPool(forkCount)
        println "[GRADLE_INFO] Cucumber Feature Directory: $cucumberFeatureDir"

        fileTree(dir: cucumberFeatureDir, include: "**/*.feature").each{ featureFile ->
            println "[GRADLE_INFO] Running feature file: $featureFile"

            executorService.execute(new Runnable() {
                @Override
                void run() {
                    javaexec {
                        main = "cucumber.api.cli.Main"
                        classpath = sourceSets.test.runtimeClasspath
                        args = [
                                "--plugin", "pretty",
                                "--plugin", "html:build/reports/cucumber-junit/htmloutput/${featureFile.name}",
                                "--plugin", "junit:build/reports/cucumber-junit/cucumber-${featureFile.name}.xml",
                                "--monochrome",
                                "--glue", cucumberGluePackage,
                                featureFile
                        ]

                        if(project.hasProperty("tags"))
                        {
                            def tags = project.getProperty("tags")
                            args "--tags", tags
                        }

                        if(project.hasProperty("environment"))
                        {
                            def environment = project.getProperty("environment")
                            systemProperties["environment"] = environment
                        }

                        /**
                         * Add all value from gradle arguments start with -D to System properties.
                         */
                        systemProperties System.properties

                    }
                }
            })
        }

        println "[GRADLE_INFO] Shutting down ExecutorService ..."
        executorService.shutdown()
        println "[GRADLE_INFO] Await termination ..."
        executorService.awaitTermination(1, TimeUnit.HOURS)
        println "[GRADLE_INFO] ExecutionService is done."
    }
}
