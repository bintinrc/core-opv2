import org.apache.tools.ant.filters.ReplaceTokens

import java.sql.Connection
import java.sql.DriverManager
import java.sql.PreparedStatement
import java.sql.ResultSet
import java.sql.SQLException
import java.util.concurrent.Executors
import java.util.concurrent.TimeUnit
import java.util.stream.Collectors

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "mysql:mysql-connector-java:6.0.6"
    }
}

gradle.class.classLoader.addURL(buildscript.configurations.classpath.find{ it.name.startsWith('mysql') }.toURI().toURL())

test {
    testLogging {
        showStandardStreams = true
        events "started", "passed"
    }
}

tasks.withType(JavaCompile) {
    options.compilerArgs << "-Xlint:unchecked"
}

task showInfo {
    doLast {
        println "==============================================================================="
        println "gradle.gradleHomeDir           : $gradle.gradleHomeDir"
        println "project.sourceCompatibility    : $project.sourceCompatibility"
        println "project.targetCompatibility    : $project.targetCompatibility"
        println "sourceCompatibility            : $sourceCompatibility"
        println "targetCompatibility            : $targetCompatibility"
        println "==============================================================================="
    }
}

def testOutputResourcesDir = sourceSets.test.output.resourcesDir as String
def cucumberFeatureDir = "$testOutputResourcesDir/cucumber/feature"
def cucumberGluePackage = project.ext.cucumberGluePackage
def bambooBuildKey = System.env.bamboo_buildKey
def bambooBuildResultKey = System.env.bamboo_buildResultKey
def listOfFailedFeatures = new ArrayList<String>()

/**
 * This variables below will be set on processTestResources.
 */
def driverName
def dbUrlQaAutomation
def dbUser
def dbPass

processTestResources {
    def environment = "local"

    if(project.hasProperty("environment"))
    {
        environment = project.getProperty("environment")
    }

    def propertiesFileName = "${sourceSets.test.resources.srcDirs[0]}/$environment-config.properties"
    println "[GRADLE_INFO] Resource is filtered and replaced using this properties file: $propertiesFileName"

    Properties properties = new Properties()
    properties.load(new FileInputStream(new File(propertiesFileName)))
    def tokens = properties.toSorted()

    driverName = tokens.get("db-driver")
    dbUrlQaAutomation = tokens.get("db-url-qa-automation")
    dbUser = tokens.get("db-user")
    dbPass = tokens.get("db-pass")

    filesMatching(["**/*.properties", "**/*.feature"]) {
        filter(ReplaceTokens, tokens: tokens, beginToken: "{", endToken: "}")
    }
}

task loadFailedScenarioTagNames(dependsOn: ["processTestResources"]) {
    println "[GRADLE_INFO] Running loadFailedScenarioTagNames ..."
    boolean isRunOnBamboo = bambooBuildResultKey!=null

    if(isRunOnBamboo)
    {
        try
        {
            groovy.sql.Sql.loadDriver(driverName)
            Connection conn = DriverManager.getConnection(dbUrlQaAutomation, dbUser, dbPass)
            println "[GRADLE_INFO] Execute SQL: SELECT scenario_tag_name FROM failed_scenarios_2 WHERE bamboo_build_result_key = '$bambooBuildResultKey'"
            PreparedStatement pstmt = conn.prepareStatement("SELECT failed_feature_file FROM failed_scenarios_2 WHERE bamboo_build_result_key = ?")
            pstmt.setString(1, bambooBuildResultKey)
            ResultSet rs = pstmt.executeQuery()
            int counter = 0

            while(rs.next())
            {
                listOfFailedFeatures.add(rs.getString("failed_feature_file"))
                counter++
            }

            println "[GRADLE_INFO] SQL Query Result: $counter row(s) found"
            rs.close()
            pstmt.close()

            println "[GRADLE_INFO] Execute SQL: DELETE FROM failed_scenarios_2 WHERE bamboo_build_result_key LIKE '$bambooBuildKey%'"
            pstmt = conn.prepareStatement("DELETE FROM failed_scenarios_2 WHERE bamboo_build_result_key LIKE ?")
            pstmt.setString(1, bambooBuildKey+"%")
            int affectedRow = pstmt.executeUpdate()
            println "[GRADLE_INFO] SQL Query Result: $affectedRow row(s) affected"

            pstmt.close()
            conn.close()
        }
        catch(ClassNotFoundException | SQLException ex)
        {
            println "[GRADLE_WARN] Failed to load data from database. Cause: ${ex.getMessage()}"
        }
    }
    else
    {
        System.out.println("[GRADLE_INFO] This project is not run on Bamboo. No need to read failed scenarios tag name from database.")
    }
}

/**
 * Execute Cucumber task.
 *
 * Note: Using JavaExec like this makes you can debug the code.
 */
task runCucumber(dependsOn: ["testClasses"], type: JavaExec) {
    def reportHtmlOutputDir = "build/reports/cucumber-junit/htmloutput"
    main = "cucumber.api.cli.Main"
    classpath = sourceSets.test.runtimeClasspath
    args = [
            "--plugin", "pretty",
            "--plugin", "html:$reportHtmlOutputDir",
            "--plugin", "junit:build/reports/cucumber-junit/cucumber.xml",
            "--plugin", "com.nv.qa.commons.cucumber.formatter.FailedReporter:build/reports/cucumber-failed-reporter/failed.txt",
            "--monochrome",
            "--glue", cucumberGluePackage
    ]

    if(listOfFailedFeatures.isEmpty())
    {
        if(project.hasProperty("tags"))
        {
            def tags = project.getProperty("tags")
            args "--tags", tags
        }

        args cucumberFeatureDir
    }
    else
    {
        listOfFailedFeatures.each { failedFeature ->
            def featureFilePath = "$cucumberFeatureDir/$failedFeature"
            args featureFilePath
        }
    }

    def argsInfo = args.toString().replace("[--", "[\n  --").replaceAll(", --", ",\n  --").replace(", $cucumberFeatureDir", ",\n  $cucumberFeatureDir").replace("]", "\n]")
    println "[GRADLE_INFO] JavaExec args on runCucumber:\n$argsInfo"

    systemProperties["REPORT_HTML_OUTPUT_DIR"] = reportHtmlOutputDir

    if(project.hasProperty("environment"))
    {
        systemProperties["environment"] = project.getProperty("environment")
    }

    /**
     * Add all value from gradle arguments start with -D to System properties.
     */
    systemProperties System.properties
}

/**
 * Execute Cucumber task in parallel.
 */
task runCucumberParallel(dependsOn: ["testClasses"]) {
    doLast {
        def isErrorOccurred = false
        def failedExecuteFeature = []
        def forkCount = 4

        if(project.hasProperty("forkCount"))
        {
            forkCount = project.getProperty("forkCount") as Integer
        }

        println "[GRADLE_INFO] Number of fork: $forkCount"
        def executorService = Executors.newFixedThreadPool(forkCount)
        println "[GRADLE_INFO] Cucumber Feature Directory: $cucumberFeatureDir"

        fileTree(dir: cucumberFeatureDir, include: "**/*.feature").each{ featureFile ->
            def failedFeatureLine = ""
            def isShouldRunThisFeatureFile = false

            if(listOfFailedFeatures.isEmpty())
            {
                isShouldRunThisFeatureFile = true
            }
            else
            {
                def shortFeatureFile = ""
                def index = featureFile.getAbsolutePath().indexOf(cucumberFeatureDir as String)

                if(index!=-1)
                {
                    shortFeatureFile = featureFile.getAbsolutePath().substring(index+cucumberFeatureDir.length()+1)
                }

                for(String failedFeature : listOfFailedFeatures)
                {
                    def failedFeatureWithoutLine = failedFeature.split(":")[0]

                    if(failedFeatureWithoutLine.equals(shortFeatureFile))
                    {
                        failedFeatureLine = failedFeature.split(":", 2)[1]
                        isShouldRunThisFeatureFile = true
                        break
                    }
                }
            }

            def featureFileToBerun = "$featureFile"

            if(isShouldRunThisFeatureFile)
            {
                if(!failedFeatureLine.isEmpty())
                {
                    featureFileToBerun += ":$failedFeatureLine"
                }

                println "[GRADLE_INFO] Running feature file: $featureFileToBerun"

                executorService.execute(new Runnable()
                {
                    @Override
                    void run()
                    {
                        def reportFileName = featureFile.getAbsolutePath().substring(cucumberFeatureDir.length()+1).replaceAll("/", "-")
                        def reportHtmlOutputDir = "build/reports/cucumber-junit/htmloutput/${reportFileName}"

                        try
                        {
                            javaexec {
                                main = "cucumber.api.cli.Main"
                                classpath = sourceSets.test.runtimeClasspath
                                args = [
                                        "--plugin", "pretty",
                                        "--plugin", "html:$reportHtmlOutputDir",
                                        "--plugin", "junit:build/reports/cucumber-junit/cucumber-${reportFileName}.xml",
                                        "--plugin", "com.nv.qa.commons.cucumber.formatter.FailedReporter:build/reports/cucumber-failed-reporter/failed-${reportFileName}.txt",
                                        "--monochrome",
                                        "--glue", cucumberGluePackage
                                ]

                                if(listOfFailedFeatures.isEmpty())
                                {
                                    if(project.hasProperty("tags"))
                                    {
                                        def tags = project.getProperty("tags")
                                        args "--tags", tags
                                    }
                                }

                                args featureFileToBerun
                                println "[GRADLE_INFO] JavaExec args on runCucumberParallel: "+args

                                systemProperties["REPORT_HTML_OUTPUT_DIR"] = reportHtmlOutputDir

                                if(project.hasProperty("environment"))
                                {
                                    def environment = project.getProperty("environment")
                                    systemProperties["environment"] = environment
                                }

                                /**
                                 * Add all value from gradle arguments start with -D to System properties.
                                 */
                                systemProperties System.properties
                            }
                        }
                        catch(org.gradle.process.internal.ExecException ex)
                        {
                            isErrorOccurred = true
                            failedExecuteFeature.add(featureFile.getAbsolutePath())
                            throw ex
                        }
                    }
                })
            }
            else
            {
                println "[GRADLE_INFO] Should not re-run feature file: $featureFileToBerun"
            }
        }

        println "[GRADLE_INFO] Shutting down ExecutorService ..."
        executorService.shutdown()
        println "[GRADLE_INFO] Await termination ..."
        executorService.awaitTermination(1, TimeUnit.HOURS)
        println "[GRADLE_INFO] ExecutionService is done."

        if(isErrorOccurred)
        {
            def prettyFailedExecuteFeature = failedExecuteFeature.stream().sorted().distinct().collect(Collectors.joining("\n"))
            throw new org.gradle.api.GradleException("There is an error occurred when running multiple feature files. Failed feature:\n$prettyFailedExecuteFeature")
        }
    }
}
