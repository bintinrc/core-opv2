import org.apache.tools.ant.filters.ReplaceTokens

import java.sql.Connection
import java.sql.DriverManager
import java.sql.PreparedStatement
import java.sql.ResultSet
import java.sql.SQLException
import java.util.concurrent.Executors
import java.util.concurrent.TimeUnit
import java.util.stream.Collectors

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "mysql:mysql-connector-java:6.0.6"
    }
}

gradle.class.classLoader.addURL(buildscript.configurations.classpath.find{ it.name.startsWith('mysql') }.toURI().toURL())

test {
    testLogging {
        showStandardStreams = true
        events "started", "passed"
    }
}

tasks.withType(JavaCompile) {
    options.compilerArgs << "-Xlint:unchecked"
}

task showInfo {
    doLast {
        println "==============================================================================="
        println "gradle.gradleHomeDir           : $gradle.gradleHomeDir"
        println "project.sourceCompatibility    : $project.sourceCompatibility"
        println "project.targetCompatibility    : $project.targetCompatibility"
        println "sourceCompatibility            : $sourceCompatibility"
        println "targetCompatibility            : $targetCompatibility"
        println "==============================================================================="
    }
}

def testOutputResourcesDir = sourceSets.test.output.resourcesDir as String
def cucumberFeatureDir = "$testOutputResourcesDir/cucumber/feature"
def cucumberGluePackage = project.ext.cucumberGluePackage
def bambooBuildResultKey = System.env.bamboo_buildResultKey
def failedScenarioTagNames = ""

/**
 * This variables below will be set on processTestResources.
 */
def driverName
def dbUrlQaAutomation
def dbUser
def dbPass

processTestResources {
    def environment = "local"

    if(project.hasProperty("environment"))
    {
        environment = project.getProperty("environment")
    }

    def propertiesFileName = "${sourceSets.test.resources.srcDirs[0]}/$environment-config.properties"
    println "[GRADLE_INFO] Resource is filtered and replaced using this properties file: $propertiesFileName"

    Properties properties = new Properties()
    properties.load(new FileInputStream(new File(propertiesFileName)))
    def tokens = properties.toSorted()

    driverName = tokens.get("db-driver")
    dbUrlQaAutomation = tokens.get("db-url-qa-automation")
    dbUser = tokens.get("db-user")
    dbPass = tokens.get("db-pass")

    filesMatching(["**/*.properties", "**/*.feature"]) {
        filter(ReplaceTokens, tokens: tokens, beginToken: "{", endToken: "}")
    }
}

task loadFailedScenarioTagNames(dependsOn: ["processTestResources"]) {
    println "[GRADLE_INFO] Running loadFailedScenarioTagNames ..."
    boolean isRunOnBamboo = bambooBuildResultKey!=null
    List<String> listOfFailedScenarioTagNames = new ArrayList<>()

    if(isRunOnBamboo)
    {
        try
        {
            groovy.sql.Sql.loadDriver(driverName)
            Connection conn = DriverManager.getConnection(dbUrlQaAutomation, dbUser, dbPass)
            println "[GRADLE_INFO] Execute SQL: SELECT * FROM failed_scenarios WHERE bamboo_build_result_key = '$bambooBuildResultKey'"
            PreparedStatement pstmt = conn.prepareStatement("SELECT * FROM failed_scenarios WHERE bamboo_build_result_key = ?")
            pstmt.setString(1, bambooBuildResultKey)
            ResultSet rs = pstmt.executeQuery()
            int counter = 0

            while(rs.next())
            {
                listOfFailedScenarioTagNames.add(rs.getString("scenario_tag_name"))
                counter++
            }

            println "[GRADLE_INFO] SQL Query Result: $counter row(s) found"
            rs.close()
            pstmt.close()

            String sqlClean = "DELETE FROM failed_scenarios"
            println "[GRADLE_INFO] Execute SQL: $sqlClean"
            pstmt = conn.prepareStatement(sqlClean)
            int affectedRow = pstmt.executeUpdate()
            println "[GRADLE_INFO] SQL Query Result: $affectedRow row(s) affected"

            pstmt.close()
            conn.close()
        }
        catch(ClassNotFoundException | SQLException ex)
        {
            println "[GRADLE_WARN] Failed to load data from database. Cause: ${ex.getMessage()}"
        }
    }
    else
    {
        System.out.println("[GRADLE_INFO] This project is not run on Bamboo. No need to read failed scenarios tag name from database.")
    }

    if(!listOfFailedScenarioTagNames.isEmpty())
    {
        failedScenarioTagNames = listOfFailedScenarioTagNames.stream().filter{ tagName->!tagName.isEmpty() }.distinct().collect(Collectors.joining(","))
    }

    println "[GRADLE_INFO] List of Failed Scenarios Tag Name: "+listOfFailedScenarioTagNames
}

/**
 * Execute Cucumber task.
 *
 * Note: Using JavaExec like this makes you can debug the code.
 */
task runCucumber(dependsOn: ["testClasses"], type: JavaExec) {
    def reportHtmlOutputDir = "build/reports/cucumber-junit/htmloutput"
    main = "cucumber.api.cli.Main"
    classpath = sourceSets.test.runtimeClasspath
    args = [
            "--plugin", "pretty",
            "--plugin", "html:$reportHtmlOutputDir",
            "--plugin", "json:build/reports/cucumber-junit/cucumber.json",
            "--plugin", "junit:build/reports/cucumber-junit/cucumber.xml",
            "--monochrome",
            "--glue", cucumberGluePackage,
            cucumberFeatureDir
    ]

    if(failedScenarioTagNames!=null && !failedScenarioTagNames.isEmpty())
    {
        def tags = failedScenarioTagNames
        println "[GRADLE_INFO] Filter Tags: $tags"
        args "--tags", tags
    }
    else if(project.hasProperty("tags"))
    {
        def tags = project.getProperty("tags")
        println "[GRADLE_INFO] Filter Tags: $tags"
        args "--tags", tags
    }

    systemProperties["REPORT_HTML_OUTPUT_DIR"] = reportHtmlOutputDir

    if(project.hasProperty("environment"))
    {
        systemProperties["environment"] = project.getProperty("environment")
    }

    /**
     * Add all value from gradle arguments start with -D to System properties.
     */
    systemProperties System.properties
}

/**
 * Execute Cucumber task in parallel.
 */
task runCucumberParallel(dependsOn: ["testClasses"]) {
    doLast {
        def forkCount = 4

        if(project.hasProperty("forkCount"))
        {
            forkCount = project.getProperty("forkCount") as Integer
        }

        println "[GRADLE_INFO] Number of fork: $forkCount"
        def executorService = Executors.newFixedThreadPool(forkCount)
        println "[GRADLE_INFO] Cucumber Feature Directory: $cucumberFeatureDir"

        fileTree(dir: cucumberFeatureDir, include: "**/*.feature").each{ featureFile ->
            println "[GRADLE_INFO] Running feature file: $featureFile"

            executorService.execute(new Runnable()
            {
                @Override
                void run()
                {
                    def reportFileName = featureFile.absolutePath.substring(cucumberFeatureDir.length()+1).replaceAll("/", "-")
                    def reportHtmlOutputDir = "build/reports/cucumber-junit/htmloutput/${reportFileName}"

                    javaexec {
                        main = "cucumber.api.cli.Main"
                        classpath = sourceSets.test.runtimeClasspath
                        args = [
                                "--plugin", "pretty",
                                "--plugin", "html:$reportHtmlOutputDir",
                                "--plugin", "junit:build/reports/cucumber-junit/cucumber-${reportFileName}.xml",
                                "--monochrome",
                                "--glue", cucumberGluePackage,
                                featureFile
                        ]

                        if(failedScenarioTagNames!=null && !failedScenarioTagNames.isEmpty())
                        {
                            def tags = failedScenarioTagNames
                            args "--tags", tags
                        }
                        else if(project.hasProperty("tags"))
                        {
                            def tags = project.getProperty("tags")
                            args "--tags", tags
                        }

                        systemProperties["REPORT_HTML_OUTPUT_DIR"] = reportHtmlOutputDir

                        if(project.hasProperty("environment"))
                        {
                            def environment = project.getProperty("environment")
                            systemProperties["environment"] = environment
                        }

                        /**
                         * Add all value from gradle arguments start with -D to System properties.
                         */
                        systemProperties System.properties

                    }
                }
            })
        }

        println "[GRADLE_INFO] Shutting down ExecutorService ..."
        executorService.shutdown()
        println "[GRADLE_INFO] Await termination ..."
        executorService.awaitTermination(1, TimeUnit.HOURS)
        println "[GRADLE_INFO] ExecutionService is done."
    }
}
